pragma solidity ^0.4.18;
 
contract Ownable {
  address public owner;  

  function Ownable() internal {
    owner = msg.sender;
  } 
  
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }  
} 

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract ERC20 {
    uint256 public totalSupply;

    function balanceOf(address who) public constant returns(uint256);
    function transfer(address to, uint256 value) public returns (bool);
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract StandardToken is ERC20 {
    using SafeMath for uint256;

    mapping(address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;

    modifier onlyPayloadSize(uint size) { 
        require(msg.data.length >= size + 4);
        _;
    }
    
    function transferTokens(address _from, address _to, uint _value) internal {
        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);

        Transfer(msg.sender, _to, _value);
    }
 
    function transfer(address _to, uint256 _value) onlyPayloadSize(2*32) public returns (bool) { 
        require(_value > 0);
        transferTokens(msg.sender, _to, _value);
        
        return true;
    } 

    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3*32) public returns (bool) { 
        var _allowance = allowed[_from][msg.sender]; 
		balances[_to] = balances[_to].add(_value);
		balances[_from] = balances[_from].sub(_value);
		allowed[_from][msg.sender] = _allowance.sub(_value);
		Transfer(_from, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool) { 
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    } 
 
    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
} 

contract Token is StandardToken, Ownable {
    
    string public constant name = "BlockBankReserveToken";

    string public constant symbol = "BBRT";

    uint8 public constant decimals = 2; 
    
    
    // Ether rate.(Ether/USD)
    uint public rateEther = 950;
 
    // Token cost on USD. (0.25 USD)
    uint coefUSD = 25 * 10**14;
     
    // Actually token price on wei.
    uint public currentTokenPrice = coefUSD / rateEther;
    
    // Change from purchase of tokens.
    uint changeWei = 0;
    
    // Stage of ICO. active = true/not active = false
    bool public isGoICO = false;  
    
    address ownerWallet = 0x0;
    address teamWallet = 0x0;
    address treasuryWallet = 0x0; 
    address bountyWallet = 0x0;
   
    event IsGoICO(bool _value); 
    event ChangeEtherRate(uint newRate);
 
    modifier whenNotPaused() {
        require(isGoICO);
        _;
    }  

    function Token(address _teamAddress, address _treasuryStorageAddress, address _bountyAddress, address _ownerWalletAddress) public {  
        totalSupply = 40000000 * 10 ** uint(decimals); 
        
        require(_teamAddress != address(0));
        teamWallet = _teamAddress;
        
        require(_treasuryStorageAddress != address(0));
        treasuryWallet = _treasuryStorageAddress;
        
        require(_bountyAddress != address(0) && _bountyAddress != _treasuryStorageAddress);
        bountyWallet = _bountyAddress;

        require(_ownerWalletAddress != address(0));
        ownerWallet = _ownerWalletAddress;
        
        transferBasicTokens();
    }
    
    function transferBasicTokens() internal { 
        balances[this] += 2880000000;
        Transfer(0x0, this, 2880000000);
        
        balances[teamWallet] += 200000000;
        Transfer(0x0, teamWallet, 200000000);
        
        balances[treasuryWallet] += 800000000;
        Transfer(0x0, treasuryWallet, 800000000);
        
        balances[bountyWallet] += 120000000;
        Transfer(0x0, bountyWallet, 120000000); 
    } 
   
    function setStageICO(bool _active) external onlyOwner {
        isGoICO = _active;
        IsGoICO(_active);
    } 
      
    function setEtherExchangeRate(uint _rateETH) external onlyOwner {
        rateEther = _rateETH;
        currentTokenPrice = coefUSD / rateEther;
        ChangeEtherRate(rateEther);
    } 
 
    function () external payable {
        buyTokens();
    }
 
    function buyTokens() public payable whenNotPaused {    
        require(msg.value > 1 szabo); //0.000001 ether

        uint256 weiAmount = msg.value; 
        uint256 amount = getAmountTokens(weiAmount);
        
        transferTokens(this, msg.sender, amount);
         
        if (changeWei > 0) {
            msg.sender.transfer(weiAmount - changeWei);
            ownerWallet.transfer(changeWei);
            changeWei = 0;
        } else {
            ownerWallet.transfer(weiAmount);
        } 
    }

    function getAmountTokens(uint _eth) private returns(uint256) {
        uint curAmountToSale = balances[this];
        uint tempAmount = _eth / currentTokenPrice;

        if (tempAmount > curAmountToSale) {
            changeWei = curAmountToSale * currentTokenPrice; 
            return curAmountToSale;
        }
        return tempAmount;
    } 

    function payBountyTokens(address[] _reciver, uint[] _amountTokens) external onlyOwner {
        require(_reciver.length == _amountTokens.length);
        require(_reciver.length <= 30);
        
        for (uint i = 0; i < _reciver.length; i++) {
            require(balances[bountyWallet] >= _amountTokens[i]);

            balances[bountyWallet] -= _amountTokens[i];
            balances[_reciver[i]] += _amountTokens[i];

            Transfer(bountyWallet, _reciver[i], _amountTokens[i]);
        }
    } 
 
    function finalizePreICO() external onlyOwner {
        if (!isGoICO) {    
            balances[treasuryWallet] += balances[this];  
            Transfer(this, treasuryWallet, balances[this]); 
            balances[this] = 0;  

            balances[treasuryWallet] += balances[bountyWallet];
            Transfer(bountyWallet, treasuryWallet, balances[bountyWallet]);
            balances[bountyWallet] = 0;
        } else {
            revert();
        }
    } 
}
